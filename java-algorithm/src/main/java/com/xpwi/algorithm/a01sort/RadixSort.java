package com.xpwi.algorithm.a01sort;/** * <p> * 基数排序 * * @author xpwi * @since 2019-05-14 */public class RadixSort {    private static void radixSort(int[] array, int d) {        //代表位数对应的数：1,10,100...        int n = 1;        //保存每一位排序后的结果用于下一位的排序输入        int k = 0;        int length = array.length;        int[][] bucket = new int[10][length];//排序桶用于保存每次排序后的结果，这一位上排序结果相同的数字放在同一个桶里        int[] order = new int[length];//用于保存每个桶里有多少个数字        while (n < d) {            //将数组array里的每个数字放在相应的桶里            for (int num : array) {                int digit = (num / n) % 10;                bucket[digit][order[digit]] = num;                order[digit]++;            }            //将前一个循环生成的桶里的数据覆盖到原数组中用于保存这一位的排序结果            for (int i = 0; i < length; i++) {                //这个桶里有数据，从上到下遍历这个桶并将数据保存到原数组中                if (order[i] != 0) {                    for (int j = 0; j < order[i]; j++) {                        array[k] = bucket[i][j];                        k++;                    }                }                //将桶里计数器置0，用于下一次位排序                order[i] = 0;            }            n *= 10;            //将k置0，用于下一轮保存位排序结果            k = 0;        }    }    public static void main(String[] args) {        int[] arr = new int[]{73, 22, 93, 43, 55, 14, 28, 65, 39, 81};        radixSort(arr, 100);        for (int i = 0; i < arr.length; i++) {            System.out.println(arr[i]);        }        int max = 0;        // 下面打印最大差值        for (int i = 0; i < arr.length - 1; i++) {            if (arr[i + 1] - arr[i] > max) {                max = arr[i + 1] - arr[i];            }        }        // System.out.println(max);    }}